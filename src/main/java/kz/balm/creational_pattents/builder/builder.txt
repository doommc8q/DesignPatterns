Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.

Применимость
1) Когда вы хотите избавиться от «телескопического конструктора».
 - Допустим, у вас есть один конструктор с десятью опциональными параметрами. Его неудобно вызывать, поэтому вы создали ещё десять конструкторов с меньшим количеством параметров. Всё, что они делают — это переадресуют вызов к базовому конструктору, подавая какие-то значения по умолчанию в параметры, которые пропущены в них самих.
2) Когда ваш код должен создавать разные представления какого-то объекта. Например, деревянные и железобетонные дома.
 - Строитель можно применить, если создание нескольких представлений объекта состоит из одинаковых этапов, которые отличаются в деталях.
 - Интерфейс строителей определит все возможные этапы конструирования. Каждому представлению будет соответствовать собственный класс-строитель. А порядок этапов строительства будет задавать класс-директор.
3) Когда вам нужно собирать сложные составные объекты, например, деревья Компоновщика.
 - Строитель конструирует объекты пошагово, а не за один проход. Более того, шаги строительства можно выполнять рекурсивно. А без этого не построить древовидную структуру, вроде Компоновщика.

Преимущества и недостатки
 - Позволяет создавать продукты пошагово.
 - Позволяет использовать один и тот же код для создания различных продуктов.
 - Изолирует сложный код сборки продукта от его основной бизнес-логики.

 - Усложняет код программы из-за введения дополнительных классов.
 - Клиент будет привязан к конкретным классам строителей, так как в интерфейсе директора может не быть метода получения результата.





