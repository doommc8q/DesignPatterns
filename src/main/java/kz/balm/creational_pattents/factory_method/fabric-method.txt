Фабричный метод — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.
Применимость
1) Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код.
 - Благодаря этому, код производства можно расширять, не трогая основной. Так, чтобы добавить поддержку нового продукта, вам нужно создать новый подкласс и определить в нём фабричный метод, возвращая оттуда экземпляр нового продукта.
2) Когда вы хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки.
 -  Пользователи могут расширять классы вашего фреймворка через наследование. Но как сделать так, чтобы фреймворк создавал объекты из этих новых классов, а не из стандартных?
 - Решением будет дать пользователям возможность расширять не только желаемые компоненты, но и классы, которые создают эти компоненты. А для этого создающие классы должны иметь конкретные создающие методы, которые можно определить.
3) Когда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо порождения новых.
 -  Такая проблема обычно возникает при работе с тяжёлыми ресурсоёмкими объектами, такими, как подключение к базе данных, файловой системе и т. д.

Преимущества и недостатки

 - Избавляет класс от привязки к конкретным классам продуктов.
 - Выделяет код производства продуктов в одно место, упрощая поддержку кода.
 - Упрощает добавление новых продуктов в программу.
 - Реализует принцип открытости/закрытости.

 - Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя.
